#include<cstdio>
#include <algorithm>
using std::sort;
#define MAXN 1005
#define MAXM 1000005
typedef struct
{
	int start,end;
	long long day;
}Edge;
Edge edges[MAXM];
int par[MAXM]/*标识数组，用来看结点是否在树里*/,rank[MAXM];//表示该点的优先级;
int n,m;
void init()
{
	for(int i=0;i<=n;i++)
	{
		par[i]=i;
		rank[i]=0;
	}
}
int find(int x)
{
	return x==par[x]? x : par[x]=find(par[x]);//查看当前x的标识，是个小递归 
}
void unite(int x,int y)//链接算法 
{
	x=find(x);//找到两个点的所在标识 
	y=find(y);
	if(x==y) return;
	if(rank[x]<rank[y])//判断两点标识的优先级 
	{
		par[x]=y;
	}
	else
	{
		par[y]=x;
		if(rank[x]==rank[y])//如果优先级相同，给序列号小的那个 
		{
			rank[x]++;
		}
	}
}
int same(int x,int y)
{
	return find(x)==find(y); //标识相同说明已经在树中 
}
bool cmp(Edge a,Edge b)
{
	return a.day<b.day;//判断day
}
long long Kruskal()
{
	sort(edges,edges+m,cmp);//将边按权值从小到大排序 
	long long res=0;
	for(int i=0;i<m;i++)
	{
		Edge e=edges[i];
		if(same(e.start,e.end)) continue;//如果已经在树中则不用链接两点了 
		unite(e.start,e.end);
		if(e.day>res) res=e.day; //从所有边中找到最大的边即是需要的 
	}
	return res;
}
int main()
{
	while(scanf("%d %d",&n,&m)!=EOF)
	{
		init();
		for(int i=0;i<m;i++)
		{
			scanf("%d %d %lld",&edges[i].start,&edges[i].end,&edges[i].day);
		}
		printf("%lld\n",Kruskal());
	}
	return 0;
}
